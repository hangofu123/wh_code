<samples>
  <sample>
    <name>VideoTexture</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates placing video on a 3D surface.]]></description>
    <folder>Samples\Managed\AudioVideo\Texture\</folder>
    <exefolder>Samples\Managed\AudioVideo\bin\</exefolder>
    <exe>csVideoTexture.exe</exe>
    <screenshot>Texture.jpg</screenshot>
    <install />
    <language>Managed</language>
    <complexity>156</complexity>
    <projectfile7>Texture.sln</projectfile7>
  </sample>
  <sample>
    <name>DMO Test</name>
    <dxarea>DirectShow</dxarea>
    <type>utility</type>
    <description><![CDATA[DMOTest is a test utility for DirectX Media Objects (DMOs). DMOTest helps you to verify that a DMO meets the DMO specification.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>dmotest.exe</exe>
    <screenshot>DMOTest.jpg</screenshot>
    <doc>ms-its:../../Utilities/dmotest.chm</doc>
    <language>
    </language>
    <keywords>
      <keyword>dmo</keyword>
      <keyword>media</keyword>
      <keyword>object</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Profile Enumerator</name>
    <dxarea>DirectShow</dxarea>
    <type>utility</type>
    <description><![CDATA[Profile Enumerator displays information about the Microsoft Windows Media system profiles installed on your machine.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>ProfileEnum.exe</exe>
    <screenshot>ProfileEnum.jpg</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>profiler</keyword>
      <keyword>enum</keyword>
      <keyword>enumerator</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Force Editor</name>
    <dxarea>DirectInput</dxarea>
    <type>utility</type>
    <description><![CDATA[Force Editor is a tool for designing and testing force feedback effects in DirectInput.  In order to use the application, you need to have at least one force-feedback device attached to the system. The program requires the Microsoft Foundation Classes 4.2 library.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>Fedit.exe</exe>
    <screenshot>ForceEditor.jpg</screenshot>
    <doc>ms-its:../../Utilities/fedit.chm</doc>
    <language>
    </language>
    <keywords>
      <keyword>force</keyword>
      <keyword>editor</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Error Lookup</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[The DirectX Error Lookup utility allows users to enter a numerical HRESULT and get back the string equivalent as well as its description.]]></description>
    <folder>Samples\C++\Misc\dxerr\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>dxerr.exe</exe>
    <screenshot>dxerr.jpg</screenshot>
    <projectfile6>dxerr.dsw</projectfile6>
    <projectfile7>dxerr.sln</projectfile7>
    <install common="false">
      <reserved>dxerr9</reserved>
    </install>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>dxerr</keyword>
      <keyword>lookup</keyword>
      <keyword>error</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Maya 5.0 Preview Pipeline</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>utilitysample</type>
    <description><![CDATA[The Preview Pipeline defines a new Maya material type which encapsulates a D3DX Effect file (*.fx). 
Maya objects which are shaded with this "DirectX Shader" material will be rendered within the
Preview Pipeline viewer window using the associated Effect.]]></description>
    <folder>Utilities\Content Creation Tool Plug-Ins\Maya 5.0 Preview Pipeline\</folder>
    <exefolder>
    </exefolder>
    <exe>
    </exe>
    <screenshot>previewpipeline.gif</screenshot>
    <readme>readme.txt</readme>
    <projectfile7>D3DMayaExportX.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>viewer</keyword>
      <keyword>alias</keyword>
      <keyword>mesh</keyword>
      <keyword>model</keyword>
      <keyword>art</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Caps Viewer</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[The DirectX Caps Viewer shows information for Direct3D devices and capabilities, DirectPlay connections, DirectInput devices and capabilities, DirectMusic ports and DirectSound capture devices and capabilities.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>DXCapsViewer.exe</exe>
    <screenshot>DXCapsViewer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/directxsdk/tools/capsviewer.htm</doc>
    <language>
    </language>
    <keywords>
      <keyword>caps</keyword>
      <keyword>viewer</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mesh Viewer</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[The Mesh Viewer utility allows you to view and modify Direct3D mesh files.]]></description>
    <folder>Utilities\MView\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>mview.exe</exe>
    <screenshot>MeshViewer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/meshviewer.htm</doc>
    <projectfile7>mview.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>2600</complexity>
    <keywords>
      <keyword>mesh</keyword>
      <keyword>viewer</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample>
    <name>D3DSpy</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[The Direct3D Spy utility (D3DSPY) is a tool that monitors function calls to the Direct3D API, and shows a representation of Direct3D's internal state.  This is valuable when writing a Direct3D program, or trying to understand why it is behaving as it is.  It can also be used to improve the performance of a Direct3D program by indentifying redundant or inefficient use of the API.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>D3DSpy.exe</exe>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/d3dspy.htm</doc>
    <screenshot>D3DSpy.jpg</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>D3DSpy</keyword>
      <keyword>d3dspy</keyword>
      <keyword>spy</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>PIX For Windows</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[Performance Investigator for DirectX (PIX) for Windows is a tool designed to capture detailed performance information from a running application. This tool will help developers analyze the work done by the CPU and the GPU in order to pinpoint performance bottlenecks.

]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <exefolder>Utilities\PIX\</exefolder>
    <exe>PIXWin.exe</exe>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/pix.htm</doc>
    <screenshot>PIX.gif</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>profile</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample external="true" new="true">
    <name>CLR Profiler (v2.0)</name>
    <dxarea>Miscellaneous</dxarea>
    <type>utility</type>
    <description><![CDATA[The CLR Profiler includes a number of very useful views of the allocation profile, including a histogram of allocated types, allocation and call graphs, a time line showing GCs of various generations and the resulting state of the managed heap after those collections, and a call tree showing per-method allocations and assembly loads.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Download"><![CDATA[http://go.microsoft.com/fwlink/?LinkId=29005]]></link>
    <screenshot>CLRProfiler.gif</screenshot>
    <doc>
    </doc>
    <projectfile6>
    </projectfile6>
    <projectfile7>
    </projectfile7>
    <language>Managed</language>
    <complexity>
    </complexity>
    <keywords>
      <keyword>profile</keyword>
      <keyword>.net</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Photoshop Texture Converter</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[The Photoshop texture file converter is a file format plug-in to Adobe Photoshop to open or save texture files. The plug-in will also work with Jasc PaintShop Pro.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/Tools/TexturePhotoshop.htm</doc>
    <screenshot>photoshop.gif</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>photoshop</keyword>
      <keyword>import</keyword>
      <keyword>export</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>3DS Max X-File Exporter</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[Files with the .x file name extension are used by Microsoft DirectX to store meshes, textures, animations, and other user-definable objects with a template hierarchy for data storage. DirectX has .x-file interfaces that provide a simple and safe way to import data into DirectX applications. These interfaces identify structures with unique identifiers (IDs), validate data layout, and provide data referencing and other intrinsic features. Included with the DirectX software development kit (SDK) is source code to build a .x-file exporter plug-in for 3DS MAX versions 4.0 through 5.1]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/xfileexporters/3dsmaxexporter.htm</doc>
    <screenshot>3dsmax.gif</screenshot>
    <language>
    </language>
    <keywords>
      <keyword>studio</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Maya X-File Exporter</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description><![CDATA[Files with the .x file name extension are used by Microsoft DirectX to store meshes, textures, animations, and other user-definable objects with a template hierarchy for data storage. DirectX has .x-file interfaces that provide a simple and safe way to import data into DirectX applications. These interfaces identify structures with unique identifiers (IDs), validate data layout, and provide data referencing and other intrinsic features. Included with the DirectX software development kit (SDK) is source code to build a .x-file exporter plug-in for Maya versions 4.0 through 5.0]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/xfileexporters/mayaexporter.htm</doc>
    <screenshot>maya.gif</screenshot>
    <language>
    </language>
    <keywords>
    </keywords>
  </sample>
  <sample external="true">
    <name>Rthdribl</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[Masaki Kawase's Rthdribl sample demonstrates "Real-time High Dynamic Range Image-Based Lighting". DirectX 9.0 high-precision texture formats and version-2.0 of Pixel Shader represent real-time true HDR rendering. 
Technical features of the demo are: True HDR (High-Dynamic Range) Rendering, IBL (Image-Based Lighting), Glare Generation (Afterimage, Bloom, Halo, Ghost, and Star), Automatic Exposure Adjustment, Iris shaped Depth of Field blur, Realistic Motion Blur, FSAA (Full-Scene Anti-Alias), Fresnel Effect (Specular Reflectance) etc. This URL link will redirect you to an external web site and is provided for informational purposes only. Microsoft makes no warranties, express or implied, with respect to this external web site or the information contained in it.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="External Website"><![CDATA[http://go.microsoft.com/fwlink/?LinkId=24919]]></link>
    <screenshot>rthdribl.jpg</screenshot>
    <doc>
    </doc>
    <projectfile6>
    </projectfile6>
    <projectfile7>
    </projectfile7>
    <language>C++</language>
    <complexity>3000</complexity>
    <keywords>
    </keywords>
  </sample>
  <sample external="true" new="true">
    <name>Coding4Fun: Building a Drum Machine with DirectSound</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Join guest columnist Ianier Munoz as he builds a drum machine using the managed Microsoft DirectX libraries and C# to synthesize an audio stream on the fly.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/vbasic/using/columns/code4fun/default.aspx?pull=/library/en-us/dncodefun/html/code4fun02032004.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>500</complexity>
  </sample>
  <sample external="true" new="true">
    <name>The .NET Show: Managed DirectX</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[DirectX 9.0 brings the first release of the Managed API for developing DirectX-based programs and games. Watch Tom Miller and Brian Benincasa talk about what Managed DirectX brings to the graphics programming arena.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/theshow/episode037/default.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>300</complexity>
  </sample>
  <sample external="true" new="true">
    <name>Windows Installer for Game Developers</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Find out how as a game developer you can use Windows Installer to install games on end-user machines. Windows Installer offers full support for a customized user interface, as well as for patching.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndrive/html/directx10212003.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>400</complexity>
  </sample>
  <sample external="true" new="true">
    <name>Presenting a Detailed Introduction to the DirectX High Level Shading Language</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Find a number of example shaders and optimization strategies in this excerpt from the book "ShaderX2 - Introduction and Tutorials with DirectX 9." Authors Craig Peeper and Jason Mitchell present a detailed introduction to the Microsoft DirectX High Level Shading Language.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnhlsl/html/shaderx2_introductionto.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>900</complexity>
  </sample>
  <sample external="true">
    <name>DirectX Slides from Game Developer Conference 2003</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[This download includes presentations given by the DirectX team at Game Developers Conference 2003. These include: How to Install Less and Play More, Direct3D Performance Tools Preview, Shader Management 101, Interactive Rendering with Smooth Area Lighting Models, Power Debugging with Microsoft Visual C++ and the DirectX extensions.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="Download Location"><![CDATA[http://www.microsoft.com/downloads/details.aspx?FamilyID=2ca1010d-16bd-4266-a916-8d4970b1aa53&DisplayLang=en]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1200</complexity>
  </sample>
  <sample external="true">
    <name>Best Practices for Game Installation and Maintenance</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Bartolomeo describes a set of best practices that can help reduce user frustration over the time taken to install a game, prevent unnecessary support calls, and allow users to start playing your game as quickly and painlessly as possible.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx07152003.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>600</complexity>
  </sample>
  <sample external="true">
    <name>Taking It Higher with the High Level Shader Language</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Kev Gee moves parts of the MSDN Shader Workshop to the Microsoft DirectX High Level Shading Language and demonstrates its advantages over the legacy of writing shaders in assembly. (14 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dndrive/html/directx04152003.asp]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>600</complexity>
  </sample>
  <sample external="true">
    <name>Using the Effects Framework</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson and Kris Gray summarize the effects framework in D3DX, an integral component of D3DX that offers developers a range of benefits by grouping sets of visual effects. (14 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx03182003.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>800</complexity>
  </sample>
  <sample external="true">
    <name>D3DX Meshes, Part 2: The Optimize Mesh Sample</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson walks through key portions of the Optimize Mesh sample in the Microsoft DirectX 9.0 SDK, showing how to use the Microsoft Direct3DX (D3DX) mesh classes to make it easy to load, save, optimize, and draw meshes to the screen. (13 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx01212003.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>751</complexity>
  </sample>
  <sample external="true">
    <name>D3DX Meshes, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Dave Aronson gives an overview of the basic classes and methods for working with meshes in Direct3D using the D3DX library. The use of meshes allow for a standard way to represent and use data for 3-D geometry. This makes working with 3-D geometry easy, and can substantially increase the speed at which an object is drawn. (6 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx11192002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>750</complexity>
  </sample>
  <sample external="true">
    <name>Exploring D3DX, Part 2: Textures</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor continues to illustrate the usefulness of D3DX, turning to the various forms of texture support provided by the Microsoft Direct3D utility library, including mipmapped texture support, cube-map support, volume-texture support, bump-mapping support, and more. (17 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx08202002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>701</complexity>
  </sample>
  <sample external="true">
    <name>Exploring D3DX, Part 1: An Overview</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor begins his exploration of D3DX, which provides meshes, effects and effects files, math support, texturing support, and more as a substantial time saver for developers. (10 printed pages)]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx07162002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>700</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop, Part 3: The Pixel Shader Exercises</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor concludes his coverage of the MSDN ShaderWorkshop with five final exercises that illustrate various usueful pixel shader tasks.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx05222002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1204</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop Application, Part 2: The Vertex Shader Exercises</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor continues his tour through the MSDN ShaderWorkshop by working through the first six exercises, which expose some basic vertex shader concepts.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx04152002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1203</complexity>
  </sample>
  <sample external="true">
    <name>The MSDN Shader Workshop Application, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor introduces the MSDN Shader Workshop application, which is based on the application used in the Meltdown 2001 shader tutorial event. The Meltdown shader tutorial includes exercises for both vertex and pixel shaders, as well as solutions to the exercises.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx03192002.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1202</complexity>
  </sample>
  <sample external="true">
    <name>Per-Pixel Lighting</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses per-pixel lighting, with an eye to explaining why pixel shaders are so important. In this article he discusses the basics of per-pixel lighting in addition to standard lighting models and custom lighting models.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx11192001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1201</complexity>
  </sample>
  <sample external="true">
    <name>Pixel Shaders, Part 1: An Introduction</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor begins his coverage of pixel shaders by showcasing several basic pixel shaders and showing how they sync up with vertex shaders and streams.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx09172001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1200</complexity>
  </sample>
  <sample external="true">
    <name>Screensavers Redux: The DirectX 8.0 Screensaver Framework</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor showcases a new screensaver framework for Microsoft DirectX 8.0. The DirectX 8.0 screensaver framework is full featured and goes far beyond the DirectX 7.0 SDK screensaver framework by providing test, configure, and run modes along with preview, password, and multi-monitor support.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx08202001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>710</complexity>
  </sample>
  <sample external="true">
    <name>Using Vertex Shaders, Part 3: Optimizing the Tweening Vertex Shader</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor showcases some basic shader optimizations applied to the DolphinVS sample's tweening shader.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx05212001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1003</complexity>
  </sample>
  <sample external="true">
    <name>Tweening 3-Way, or Using Vertex Shaders, Part 2</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor explores using vertex shader to perform character animation. The basic character animation technique presented is known as "tweening." This name derives from the process itself, in which character animation artists use an authoring tool and define several models in sequence for each action, for instance the action of running. Each model contains a pose of the action. The programmer reads the poses and generates intermediate, or "in-between" frames, using linear interpolation between the two sets of vertices.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx04162001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1002</complexity>
  </sample>
  <sample external="true">
    <name>Using Vertex Shaders, Part 1</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses vertex shaders in detail. Vertex shaders give developers fine-grained control over the vertex transformation and lighting pipeline and can be used as a substitute in DirectX 8 for the fixed-function transform and lighting pipeline]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx02192001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1001</complexity>
  </sample>
  <sample external="true">
    <name>Programmable Shaders for DirectX 8.0</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor presents the programmable pipeline, unarguably the most important new feature among a wealth of new features in DirectX 8.0 graphics.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx01152001.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>1000</complexity>
  </sample>
  <sample external="true">
    <name>The Simplification of DirectX 8.0 Graphics</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor discusses the new features DirectX 8.0 graphics; this release simplifies many common tasks, including initialization, enumeration, device creation, presentation, lost devices/surfaces, and resource management.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx12192000.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>101</complexity>
  </sample>
  <sample external="true">
    <name>Introduction to DirectX 8.0</name>
    <dxarea>Direct3D</dxarea>
    <type>article</type>
    <description><![CDATA[Philip Taylor presents an overview of all the cool features this new version provides for developers.]]></description>
    <folder>Samples\SampleBrowser\Thumbnails\</folder>
    <link name="MSDN Article"><![CDATA[http://msdn.microsoft.com/library/en-us/dndrive/html/directx112000.asp?frame=true]]></link>
    <screenshot>article.jpg</screenshot>
    <language>
    </language>
    <complexity>100</complexity>
  </sample>
  <sample>
    <name>Tutorial 1: Create a Device</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to initialize Direct3D, render a scene, and eventually shut down.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial1\</folder>
    <screenshot>Tut01_CreateDevice.jpg</screenshot>
    <projectfile7>Tutorial1.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial1.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>5</complexity>
  </sample>
  <sample>
    <name>Play3DSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Play 3D Sound sample shows how to create a 3-D sound buffer and manipulate its properties.  It is similar to the 3D Audio Sample but uses only the DirectSound API.]]></description>
    <folder>Samples\Managed\DirectSound\Play3DSound\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csPlay3DSound.exe</exe>
    <screenshot>Play3DSound.gif</screenshot>
    <projectfile7>Play3DSound.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The CaptureSound application shows how to capture waveforms to a file.]]></description>
    <folder>Samples\Managed\DirectSound\CaptureSound\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csCaptureSound.exe</exe>
    <screenshot>CaptureSound.gif</screenshot>
    <projectfile7>CaptureSound.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
    </install>
    <language>Managed</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AdjustSound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The AdjustSound sample shows how to create a DirectSound secondary buffer to play a WAV file, and how to change the parameters of the buffer.]]></description>
    <folder>Samples\Managed\DirectSound\AdjustSound\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csAdjustSound.exe</exe>
    <screenshot>AdjustSound.gif</screenshot>
    <projectfile7>AdjustSound.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 5: Using Texture Maps</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial covers how to load textures, set up vertices, and display objects with texture.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial5\</folder>
    <projectfile7>Tutorial5.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial5.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>25</complexity>
    <screenshot>Tut05_Textures.jpg</screenshot>
  </sample>
  <sample>
    <name>Enumerate DirectSound Devices</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Enumerate DirectSound Devices sample shows how to enumerate and create playback and capture devices.]]></description>
    <folder>Samples\Managed\DirectSound\EnumDevices\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csEnumDevices.exe</exe>
    <screenshot>EnumDevices.gif</screenshot>
    <projectfile7>EnumDevices.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Feedback</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Feedback sample shows Force Feedback via devices that support it.  You can observe how the forces feel when you move and twist the stick, rotate the throttle wheel, and press buttons in various combinations.  You will need a force feedback input device for this sample.]]></description>
    <folder>Samples\Managed\DirectInput\Feedback\</folder>
    <screenshot>csFeedback.jpg</screenshot>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csFeedback.exe</exe>
    <projectfile7>Feedback.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
    </install>
    <language>Managed</language>
    <complexity>1048</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Joystick</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Joystick sample obtains and displays joystick data.]]></description>
    <folder>Samples\Managed\DirectInput\Joystick\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csJoystick.exe</exe>
    <screenshot>Joystick.gif</screenshot>
    <projectfile7>Joystick.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
      <reserved>JoystickState</reserved>
      <reserved>No Joystick Found</reserved>
      <reserved>DeviceDataFormat.Joystick</reserved>
      <reserved>CurrentJoystickState</reserved>
    </install>
    <language>Managed</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>Joystick</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mouse</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Mouse sample obtains and displays mouse data.]]></description>
    <folder>Samples\Managed\DirectInput\Mouse\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csMouse.exe</exe>
    <screenshot>Mouse.gif</screenshot>
    <projectfile7>Mouse.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
      <reserved>SystemGuid.Mouse</reserved>
      <reserved>MouseState</reserved>
      <reserved>MouseEvent</reserved>
      <reserved>MouseButton</reserved>
    </install>
    <language>Managed</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Keyboard</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Keyboard sample obtains and displays keyboard data.]]></description>
    <folder>Samples\Managed\DirectInput\Keyboard\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csKeyboard.exe</exe>
    <screenshot>Keyboard.gif</screenshot>
    <projectfile7>Keyboard.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
      <reserved>SystemGuid.Keyboard</reserved>
      <reserved>KeyboardState</reserved>
    </install>
    <language>Managed</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>Keyboard</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 4: Creating and Using Lights</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[The sample code in this tutorial introduces the topics of lights and materials.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial4\</folder>
    <screenshot>Tut04_Lights.jpg</screenshot>
    <projectfile7>Tutorial4.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial4.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>20</complexity>
  </sample>
  <sample>
    <name>Tutorial 3: Using Matrices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial introduces the concept of matrices and shows how to use them. The Vertices sample project rendered 2-D vertices to draw a triangle. However, in this tutorial you will be working with transformations of vertices in 3-D.  Matrices are also used to set up cameras and viewports.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial3\</folder>
    <screenshot>Tut03_Matrices.jpg</screenshot>
    <projectfile7>Tutorial3.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial3.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>15</complexity>
  </sample>
  <sample>
    <name>Tutorial 6: Using Meshes</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows how to load, render, and unload a mesh.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial6\</folder>
    <projectfile7>Tutorial6.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial6.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>30</complexity>
    <screenshot>Tut06_Meshes.jpg</screenshot>
  </sample>
  <sample>
    <name>Tutorial 2: Rendering Vertices</name>
    <dxarea>Direct3D</dxarea>
    <type>tutorial</type>
    <description><![CDATA[This tutorial shows the required steps to create a triangle with vertices.]]></description>
    <folder>Samples\Managed\Direct3D\Tutorials\Tutorial2\</folder>
    <screenshot>Tut02_Vertices.jpg</screenshot>
    <projectfile7>Tutorial2.sln</projectfile7>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/tutorials/tutorial2.htm</doc>
    <install />
    <language>Managed</language>
    <complexity>10</complexity>
  </sample>
  <sample>
    <name>DxDiagOutput</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\Managed\Misc\DxDiagOutput\</folder>
    <exefolder>Samples\Managed\Misc\Bin\</exefolder>
    <exe>csDxDiagOutput.exe</exe>
    <screenshot>DxDiagOutput.jpg</screenshot>
    <projectfile7>DxDiagOutput.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
    </install>
    <language>Managed</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ReadFFE</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ReadFFE sample loads and plays all of the DirectInput Force Feedback effects in stored in a DirectInput effects file.]]></description>
    <folder>Samples\Managed\DirectInput\ReadFFE\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csReadFFE.exe</exe>
    <screenshot>ReadFFE.gif</screenshot>
    <projectfile7>ReadFFE.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>ReadFFE</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>DirectInput</keyword>
      <keyword>EffectObject</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Scrawl</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The Scrawl application demonstrates use of the mouse in nonexclusive mode in a windowed application.]]></description>
    <folder>Samples\Managed\DirectInput\Scrawl\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csScrawl.exe</exe>
    <screenshot>Scrawl.gif</screenshot>
    <projectfile7>Scrawl.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>Scrawl</keyword>
      <keyword>mouse</keyword>
      <keyword>nonexclusive</keyword>
      <keyword>cooperative</keyword>
      <keyword>DirectInput</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlaySound</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The PlaySound sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\Managed\DirectSound\PlaySound\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csPlaySound.exe</exe>
    <screenshot>playsound.gif</screenshot>
    <projectfile7>PlaySound.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>DirectSound</keyword>
      <keyword>DirectSoundBuffer</keyword>
      <keyword>WaveFormat</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>Text3D</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
    <folder>Samples\Managed\Direct3D\Text3D\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csText3D.exe</exe>
    <screenshot>Text3D.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/text3d.htm</doc>
    <projectfile7>Text3D.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Player</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample provides simple playback of audio and video.]]></description>
    <folder>Samples\Managed\AudioVideo\Player\</folder>
    <exefolder>Samples\Managed\AudioVideo\bin\</exefolder>
    <exe>csAVPlayer.exe</exe>
    <screenshot>Player.jpg</screenshot>
    <install />
    <language>Managed</language>
    <complexity>156</complexity>
    <projectfile7>Player.sln</projectfile7>
  </sample>
  <sample>
    <name>SoundFX</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The SoundFX sample shows how to use DMOs with DirectSound and how to manipulate effect parameters.  It is similar to the DirectMusic AudioFX Sample but does not use an audiopath or any of the DirectMusic interfaces.]]></description>
    <folder>Samples\Managed\DirectSound\SoundFX\</folder>
    <exefolder>Samples\Managed\DirectSound\Bin\</exefolder>
    <exe>csSoundFX.exe</exe>
    <screenshot>SoundFX.gif</screenshot>
    <projectfile7>SoundFX.sln</projectfile7>
    <install common="false">
      <additional src="..\..\Common\AssemblyInfo.cs" dest="Common\AssemblyInfo.cs" />
    </install>
    <language>Managed</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionBasic</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ActionBasic sample is intended to be an introduction to action mapping, and illustrates a step by step approach to creating an action mapped application.]]></description>
    <folder>Samples\Managed\DirectInput\ActionBasic\</folder>
    <exefolder>Samples\Managed\DirectInput\Bin\</exefolder>
    <exe>csActionBasic.exe</exe>
    <screenshot>ActionBasic.gif</screenshot>
    <projectfile7>ActionBasic.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>CustomUI</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[Starting point for a new Direct3D application]]></description>
    <folder>Samples\Managed\Direct3D\CustomUI\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csCustomUI.exe</exe>
    <screenshot>CustomUI.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/customui.htm</doc>
    <projectfile7>CustomUI.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>0</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>Scripting</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The sample demonstrates one technique to use C# as a scripting engine for your unmanaged applications .]]></description>
    <folder>Samples\Managed\Direct3D\Scripting\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>Scripting.exe</exe>
    <screenshot>Scripting.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/scripting.htm</doc>
    <projectfile7>Scripting.sln</projectfile7>
    <install>
      <additional src="..\..\..\C++\Common" dest="Common" />
      <media>Misc\seafloor.x</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\sphere0.x</media>
      <media>Airplane</media>
      <media>Misc\cell.x</media>
      <media>Misc\cellceiling.jpg</media>
      <media>Misc\cellfloor.jpg</media>
      <media>Misc\cellwall.jpg</media>
      <media>Dwarf</media>
    </install>
    <language>Managed</language>
    <complexity>500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>C#</keyword>
      <keyword>Scripting</keyword>
      <keyword>Managed</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>ProgressiveMesh</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The ProgressiveMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  A progressive mesh is one in which the vertex information is stored internally in a special tree which can be accessed to render the mesh with any given number of vertices.  This procedure is fast, so progressive meshes are ideal for level-of-detail scenarios, where objects in the distance are rendered with fewer polygons.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\Managed\Direct3D\ProgressiveMesh\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csProgressiveMesh.exe</exe>
    <screenshot>ProgressiveMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/progressivemesh.htm</doc>
    <projectfile7>ProgressiveMesh.sln</projectfile7>
    <install name="Progressive Mesh">
      <media>Dwarf</media>
    </install>
    <language>Managed</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>ID3DXMesh</keyword>
      <keyword>ID3DXPMesh</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>BasicHLSL</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows a simple example of the High-Level Shader Language (HLSL) using the effect interface.]]></description>
    <folder>Samples\Managed\Direct3D\BasicHLSL\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csBasicHLSL.exe</exe>
    <screenshot>BasicHLSL.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/basichlsl.htm</doc>
    <projectfile7>BasicHLSL.sln</projectfile7>
    <install>
      <media>Tiny</media>
    </install>
    <language>Managed</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>EmptyProject</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[Starting point for a new Direct3D application]]></description>
    <folder>Samples\Managed\Direct3D\EmptyProject\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csEmptyProject.exe</exe>
    <screenshot>EmptyProject.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/emptyproject.htm</doc>
    <projectfile7>EmptyProject.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>0</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>CompiledEffect</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how an Effect object can be compiled when the project is built and loaded directly as a binary file at runtime.]]></description>
    <folder>Samples\Managed\Direct3D\CompiledEffect\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <screenshot>CompiledEffect.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/compiledeffect.htm</doc>
    <projectfile7>CompiledEffect.sln</projectfile7>
    <install>
      <media>Dwarf</media>
    </install>
    <language>Managed</language>
    <complexity>700</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>ID3DXEffect</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HDRCubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates cubic environment-mapping with floating-point cube textures and high dynamic range lighting. DirectX 9.0's new floating-point textures can store color values higher than 1.0, which can make lighting effects more realistic on the environment-mapped geometry when the material absorbs part of the light. Note that not all cards support all features for the environment-mapping and high dynamic range lighting techniques.]]></description>
    <folder>Samples\Managed\Direct3D\HDRCubeMap\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csHDRCubeMap.exe</exe>
    <screenshot>HDRCubeMap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/hdrcubemap.htm</doc>
    <projectfile7>HDRCubeMap.sln</projectfile7>
    <install>
      <media>Misc\car.x</media>
      <media>Misc\env2.bmp</media>
      <media>Misc\floor.bmp</media>
      <media>Misc\ground2.bmp</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\skullocc.x</media>
      <media>Misc\sphere0.x</media>
      <media>Misc\teapot.x</media>
      <media>Airplane</media>
    </install>
    <language>Managed</language>
    <complexity>1750</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>IDirect3DCubeTexture9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HLSLwithoutEffects</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders written in Microsoft Direct3D's High-Level Shader Language (HLSL). HLSL shaders have C-like syntax and constructs, such as functions, expressions, statements, and data types. A vertex shader looks very similar to a C function, and is executed by the 3D device once per every vertex processed to affect the properties of the vertex.  Note that not all cards may support all the various features vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\Managed\Direct3D\HLSLwithoutEffects\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csHLSLwithoutEffects.exe</exe>
    <screenshot>HLSLwithoutEffects.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/hlslwithouteffects.htm</doc>
    <projectfile7>HLSLwithoutEffects.sln</projectfile7>
    <install />
    <language>Managed</language>
    <complexity>170</complexity>
    <keywords>
      <keyword>Device</keyword>
      <keyword>Direct3D</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>EnhancedMesh</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The EnhancedMesh sample shows how to use D3DX to load and enhance a mesh. The mesh is enhanced by increasing the vertex count.]]></description>
    <folder>Samples\Managed\Direct3D\EnhancedMesh\</folder>
    <exefolder>Samples\Managed\Direct3D\Bin\</exefolder>
    <exe>csEnhancedMesh.exe</exe>
    <screenshot>EnhancedMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_m.chm::/directx/direct3d/samples/enhancedmesh.htm</doc>
    <projectfile7>EnhancedMesh.sln</projectfile7>
    <install>
      <media>Dwarf</media>
    </install>
    <language>Managed</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureTex9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample combines features of the Texture3D9 and PlayCap samples to render live incoming video onto a waving flag.  CaptureTex9 will enumerate any existing video capture devices attached to the system and will load the first device found.  A DirectShow renderer object will be created to render the incoming video stream onto a Direct3D9 surface, taking advantage of new Direct3D9 features.]]></description>
    <folder>Samples\C++\DirectShow\Capture\CaptureTex9\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CaptureTex9.exe</exe>
    <screenshot>CaptureTex9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/capturetex9sample.htm</doc>
    <projectfile6>CaptureTex9.dsw</projectfile6>
    <projectfile7>CaptureTex9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>CaptureTex9</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>HDRLighting</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates some high dynamic range lighting effects using floating point textures. Integer texture formats have a limited range of discrete values, which results in lost color information under dynamic lighting conditions; conversely, floating point formats can store very small or very large color values, including values beyond the displayable 0.0 to 1.0 range. This flexibility allows for dynamic lighting effects, such as blue-shifting under low lighting and blooming under intense lighting. This sample also employs a simple light adaptation model, under which the camera is momentarily over-exposed or under-exposed to changing light conditions.]]></description>
    <folder>Samples\C++\Direct3D\HDRLighting\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HDRLighting.exe</exe>
    <screenshot>HDRLighting.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/hdrlighting.htm</doc>
    <projectfile6>HDRLighting.dsw</projectfile6>
    <projectfile7>HDRLighting.sln</projectfile7>
    <install>
      <media>Misc\env2.bmp</media>
      <media>Misc\ground2.bmp</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\env3.bmp</media>
      <media>Misc\sphere0.x</media>
    </install>
    <language>C++</language>
    <complexity>2900</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayDVD</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DVD</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayDVD is a simple windowed DVD player based on the PlayWnd sample.  It allows you to render a DVD volume, watch movies, determine whether closed captioning and subpicture streams are displayed, adjust the playback rate and window size, and navigate the DVD menus with the keyboard or the mouse.]]></description>
    <folder>Samples\C++\DirectShow\DVD\PlayDVD\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayDVD.exe</exe>
    <screenshot>PlayDVD.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayDVDsample.htm</doc>
    <projectfile6>PlayDVD.dsw</projectfile6>
    <projectfile7>PlayDVD.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>PlayDVD</keyword>
      <keyword>DVD</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Scrawl</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Scrawl application demonstrates use of the mouse in exclusive mode in a windowed application.]]></description>
    <folder>Samples\C++\DirectInput\Scrawl\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Scrawl.exe</exe>
    <screenshot>Scrawl.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/scrawlsample.htm</doc>
    <projectfile6>Scrawl.dsw</projectfile6>
    <projectfile7>Scrawl.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>140</complexity>
    <keywords>
      <keyword>Scrawl</keyword>
      <keyword>mouse</keyword>
      <keyword>exclusive</keyword>
      <keyword>cooperative</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionBasic</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ActionBasic sample is intended to be an introduction to action mapping, and illustrates a step by step approach to creating an action mapped application.]]></description>
    <folder>Samples\C++\DirectInput\ActionBasic\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ActionBasic.exe</exe>
    <screenshot>ActionBasic.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/actionbasicsample.htm</doc>
    <projectfile6>ActionBasic.dsw</projectfile6>
    <projectfile7>ActionBasic.sln</projectfile7>
    <install commmon="false" />
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>ActionBasic</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>ActionMapper</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The ActionMapper sample is built upon the action mapping framework provided with the SDK.  The program illustrates how this framework can simplify the bookkeepping required for an action mapped application.]]></description>
    <folder>Samples\C++\DirectInput\ActionMapper\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ActionMapper.exe</exe>
    <screenshot>ActionMapper.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/actionmappersample.htm</doc>
    <projectfile6>ActionMapper.dsw</projectfile6>
    <projectfile7>ActionMapper.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>ActionMapper</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AdjustSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The AdjustSound sample shows how to create a DirectSound secondary buffer to play a WAV file, and how to change the parameters of the buffer.]]></description>
    <folder>Samples\C++\DirectSound\AdjustSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>AdjustSound.exe</exe>
    <screenshot>AdjustSound.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/adjustsoundsample.htm</doc>
    <projectfile6>AdjustSound.dsw</projectfile6>
    <projectfile7>AdjustSound.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample x64="false">
    <name>TxtPlayer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a custom allocator-presenter to render alpha-blended text over a running video.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\TxtPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TxtPlayer.exe</exe>
    <screenshot>TxtPlayer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/TxtPlayersample.htm</doc>
    <projectfile6>TxtPlayer.dsw</projectfile6>
    <projectfile7>TxtPlayer.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>TxtPlayer</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Renderless</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a custom allocator-presenter to render video in a window.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Renderless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Renderless.exe</exe>
    <screenshot>Renderless.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Renderlesssample.htm</doc>
    <projectfile6>Renderless.dsw</projectfile6>
    <projectfile7>Renderless.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>Renderless</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>VMRXcl</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application shows capabilities of the new video mixing renderer (VMR) that is the default video renderer in Windows XP.  In particular, it demonstrates how to use the VMR in exclusive DirectDraw mode and how to implement a user-provided (customized) Allocator-Presenter for the VMR.  Also, it contains useful utilities to manage bitmaps (as textures) and TrueType fonts for text over video.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRXcl\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRXcl.exe</exe>
    <screenshot>VMRXcl.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRXclsample.htm</doc>
    <projectfile6>VMRXcl.dsw</projectfile6>
    <projectfile7>VMRXcl.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>VMRXcl</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AMCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates the following tasks related to audio and video capture: Capture to a file, Live preview, Allocation of the capture file, Display of device property pages, Device enumeration, Stream control]]></description>
    <folder>Samples\C++\DirectShow\Capture\AMCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AMCap.exe</exe>
    <screenshot>AMCap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/amcapsample.htm</doc>
    <projectfile6>AMCap.dsw</projectfile6>
    <projectfile7>AMCap.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>AMCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AmplitudeModulation</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The AmplitudeModulation sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\C++\DirectSound\AmplitudeModulation\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>AmplitudeModulation.exe</exe>
    <screenshot>AmplitudeModulation.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/AmplitudeModulationsample.htm</doc>
    <projectfile6>AmplitudeModulation.dsw</projectfile6>
    <projectfile7>AmplitudeModulation.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample x64="false">
    <name>VMRMulti</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample plays multiple video files over a Direct3D background. The media files all use separate filter graphs and can be controlled individually.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRMulti\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRMulti.exe</exe>
    <screenshot>VMRMulti.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRMultisample.htm</doc>
    <projectfile6>VMRMulti.dsw</projectfile6>
    <projectfile7>VMRMulti.sln</projectfile7>
    <language>C++</language>
    <complexity>2400</complexity>
    <keywords>
      <keyword>VMRMulti</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Cube</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer and a plug-in compositor to render video on a spinning cube.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Cube\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Cube.exe</exe>
    <screenshot>Cube.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Cubesample.htm</doc>
    <projectfile6>Cube.dsw</projectfile6>
    <projectfile7>Cube.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>Cube</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>VMRPlayer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Video Mixing Renderer to blend one or two running videos and a static image.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRPlayer.exe</exe>
    <screenshot>VMRPlayer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRPlayersample.htm</doc>
    <projectfile6>VMRPlayer.dsw</projectfile6>
    <projectfile7>VMRPlayer.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>VMRPlayer</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMODemo</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates how to use Microsoft DirectX Media Objects (DMO).  It streams audio data from a WAV file through a DirectSound Audio Effect DMO to a DirectSound buffer.  For DMOs which are processing data with one input and one output, where the media types of the input and output are the same, and the processing can be done in place, the IMediaObjectInPlace interface can be used.  If a DMO supports this interface, DMODemo will call process() on this interface to process the data in place; otherwise, DMODemo will use methods of IMediaObject to process the data.]]></description>
    <folder>Samples\C++\DirectShow\DMO\DMODemo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DMODemo.exe</exe>
    <screenshot>DMODemo.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/dmodemo.htm</doc>
    <projectfile6>DMODemo.dsw</projectfile6>
    <projectfile7>DMODemo.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DMODemo</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>ASFCopy</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This command line application transcodes one or more files to an ASF file.]]></description>
    <folder>Samples\C++\DirectShow\Misc\ASFCopy\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>ASFCopy.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/ASFCopysample.htm</doc>
    <projectfile6>ASFCopy.dsw</projectfile6>
    <projectfile7>ASFCopy.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>ASFCopy</keyword>
      <keyword>Misc</keyword>
      <keyword>ASF</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample>
    <name>EffectEdit</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[EffectEdit is a tool with which one can create and edit D3DX effect (*.fx) files and view the graphical result interactively.  Changes to the effect file are compiled automatically and any compilation errors are shown in the 'Effect compilation results' pane.  Note that not all .fx files are designed to work with EffectEdit, since they may require special vertex types or extra processing that is not done by the EffectEdit program.]]></description>
    <folder>Samples\C++\Direct3D\EffectEdit\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EffectEdit.exe</exe>
    <screenshot>EffectEdit.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/EffectEdit.htm</doc>
    <projectfile6>EffectEdit.dsw</projectfile6>
    <projectfile7>EffectEdit.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>250</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>AudioBox</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This MFC application is an audio-only media player similar to Jukebox. You can select a media directory and play all audio media files, including Windows Media Files.  Options include seeking, muting audio, randomizing file selection, adjusting volume, and looping the current media file.]]></description>
    <folder>Samples\C++\DirectShow\Players\AudioBox\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AudioBox.exe</exe>
    <screenshot>AudioBox.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/AudioBoxsample.htm</doc>
    <projectfile6>AudioBox.dsw</projectfile6>
    <projectfile7>AudioBox.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>AudioBox</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>AudioCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application demonstrates PCM audio capture using DirectShow and allows the user to audition the audio input while recording.  AudioCap enables the user to perform the following tasks: Capture audio to a file, Select the audio capture device and its corresponding input pin, View properties on the audio capture device, Select the sample rate and number of channels (stereo or mono)]]></description>
    <folder>Samples\C++\DirectShow\Capture\AudioCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>AudioCap.exe</exe>
    <screenshot>AudioCap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/AudioCapsample.htm</doc>
    <projectfile6>AudioCap.dsw</projectfile6>
    <projectfile7>AudioCap.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>AudioCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DIConfig</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DIConfig code demonstrates the implementation of a configuration user interface based upon the DirectInput Mapper technology. This sample code is *very* complex, and is intended to be taken as a reference implementation more than a learning tool.]]></description>
    <folder>Samples\C++\DirectInput\DIConfig\</folder>
    <screenshot>DIConfig.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/diconfigsample.htm</doc>
    <projectfile6>DIConfig.dsw</projectfile6>
    <projectfile7>DIConfig.sln</projectfile7>
    <install common="false">
      <reserved>LPDICONFIG</reserved>
    </install>
    <language>C++</language>
    <complexity>2900</complexity>
    <keywords>
      <keyword>DIConfig</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>ConfigureDevices</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 5: Textures</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Textures tutorial shows how to use texture mapping in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut05_Textures\</folder>
    <screenshot>Tut05_Textures.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/5/tutorial5.htm</doc>
    <projectfile6>Textures.dsw</projectfile6>
    <projectfile7>Textures.sln</projectfile7>
    <install name="Textures" common="false">
      <reserved>SetTextureStageState</reserved>
    </install>
    <language>C++</language>
    <complexity>15</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>BGMusic</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to swap source filters in a filter graph.  It will cycle through three MP3 files, displaying the name of each file as it is played. The MP3 files used by this sample are located in the Media directory of the DirectX SDK ( <sdk root>\samples\Media ).]]></description>
    <folder>Samples\C++\DirectShow\Players\BGMusic\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>BGMusic.exe</exe>
    <screenshot>BGMusic.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/BGMusicsample.htm</doc>
    <projectfile6>BGMusic.dsw</projectfile6>
    <projectfile7>BGMusic.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>BGMusic</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Text</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend video and text.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Text\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Text.exe</exe>
    <screenshot>Text.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Textsample.htm</doc>
    <projectfile6>Text.dsw</projectfile6>
    <projectfile7>Text.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Text</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Ticker</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend video and text.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Ticker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Ticker.exe</exe>
    <screenshot>vmrTicker.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Tickersample.htm</doc>
    <projectfile6>Ticker.dsw</projectfile6>
    <projectfile7>Ticker.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Ticker</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Watermark</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Watermark demonstrates the VMR's ability to alpha blend a static image with the running video stream (or with multiple video streams).  In addition to displaying a watermark (logo) in the bottom right corner of the window, this sample also demonstrates how to flip, mirror, manipulate alpha, and move a bitmap around in the application's video window.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Watermark\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Watermark.exe</exe>
    <screenshot>Watermark.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Watermarksample.htm</doc>
    <projectfile6>Watermark.dsw</projectfile6>
    <projectfile7>Watermark.sln</projectfile7>
    <language>C++</language>
    <complexity>1400</complexity>
    <keywords>
      <keyword>Watermark</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Play3DSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Play 3D Sound sample shows how to create a 3-D sound buffer and manipulate its properties. It is similar to the 3D Audio Sample but uses only the DirectSound API.]]></description>
    <folder>Samples\C++\DirectSound\Play3DSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>Play3DSound.exe</exe>
    <screenshot>Play3DSound.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/Play3DSoundsample.htm</doc>
    <projectfile6>Play3DSound.dsw</projectfile6>
    <projectfile7>Play3DSound.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample x64="false">
    <name>Pip</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend multiple video streams in a window. After loading two media files, you can use the keyboard and function keys to move and resize the secondary media stream. You may also flip, mirror, and swap the streams with or without an animation effect.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Pip\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Pip.exe</exe>
    <screenshot>Pip.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Pipsample.htm</doc>
    <projectfile6>VMRPip.dsw</projectfile6>
    <projectfile7>VMRPip.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Pip</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Blender</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to blend multiple video streams in an MFC dialog-based application.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Blender\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Blender.exe</exe>
    <screenshot>Blender.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Blendersample.htm</doc>
    <projectfile6>Blender.dsw</projectfile6>
    <projectfile7>Blender.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Blender</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>ReadFFE</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FFeedFileRead sample enumerates and plays all of the DirectInput Force Feedback effects in stored in a DirectInput effects file.]]></description>
    <folder>Samples\C++\DirectInput\ReadFFE\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>ReadFFE.exe</exe>
    <screenshot>ReadFFE.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/readffesample.htm</doc>
    <projectfile6>ReadFFE.dsw</projectfile6>
    <projectfile7>ReadFFE.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>ReadFFE</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>IDirectInputEffect</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMOEnum</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates the use of the DMOEnum, IEnumDMO, and IMediaObject interfaces to enumerate and read information about DirectX Media Objects installed on your system.  You may view all DMOs or only those that are not keyed by checking the "Include Keyed DMOs?" checkbox.]]></description>
    <folder>Samples\C++\DirectShow\Misc\DMOEnum\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DMOEnum.exe</exe>
    <screenshot>DMOEnum.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/DMOEnumsample.htm</doc>
    <projectfile6>DMOEnum.dsw</projectfile6>
    <projectfile7>DMOEnum.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DMOEnum</keyword>
      <keyword>Misc</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayDMO</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayDMO allows you to open any media file, view its video component (if present), and apply any number of DMO audio effects to its audio component.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayDMO\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayDMO.exe</exe>
    <screenshot>PlayDMO.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayDMOsample.htm</doc>
    <projectfile6>PlayDMO.dsw</projectfile6>
    <projectfile7>PlayDMO.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>PlayDMO</keyword>
      <keyword>Player</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CaptureSound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The CaptureSound application shows how to capture waveforms to a file.]]></description>
    <folder>Samples\C++\DirectSound\CaptureSound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>CaptureSound.exe</exe>
    <screenshot>CaptureSound.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/CaptureSoundsample.htm</doc>
    <projectfile6>CaptureSound.dsw</projectfile6>
    <projectfile7>CaptureSound.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>DVApp</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates how to build various types of filter graphs for controlling DV camcorders.  It also shows how to perform capture, preview,  transmit, and device control with a DV camcorder.]]></description>
    <folder>Samples\C++\DirectShow\Capture\DVApp\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DVApp.exe</exe>
    <screenshot>DVApp.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/DVAppsample.htm</doc>
    <projectfile6>DVApp.dsw</projectfile6>
    <projectfile7>DVApp.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DVApp</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>TransViewer</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This MFC application allows you to preview all of the DirectShow Editing Services transitions installed on your system. You can preview transitions using media files or simple solid colors.]]></description>
    <folder>Samples\C++\DirectShow\Editing\TransViewer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TransViewer.exe</exe>
    <screenshot>TransViewer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/TransViewersample.htm</doc>
    <projectfile6>TransViewer.dsw</projectfile6>
    <projectfile7>TransViewer.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>TransViewer</keyword>
      <keyword>Editing</keyword>
      <keyword>transition</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Texture Tool</name>
    <dxarea>Direct3D</dxarea>
    <type>utilitysample</type>
    <description><![CDATA[The DirectX Texture Tool allows users to easily create texture maps that use the new DXTn compression formats.  Creating a DXTn-compressed texture is actually not that difficult to do: DirectDraw's Blt function can do the conversion for you.  Advanced developers will probably want to write their own tools that meet their specific needs.  But this tool provides useful basic functionality.]]></description>
    <folder>Samples\C++\Direct3D\dxtex\</folder>
    <exefolder>Utilities\</exefolder>
    <exe>DXTex.exe</exe>
    <screenshot>DXTex.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tools/dxtextool.htm</doc>
    <projectfile6>dxtex.dsw</projectfile6>
    <projectfile7>dxtex.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1240</complexity>
    <keywords>
      <keyword>texture</keyword>
      <keyword>tool</keyword>
      <keyword>utility</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>CompressView</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates how to recompress a video/audio source file into another file with a different compression type. You can convert MPG, QT, AVI, or any video file that DirectShow supports into an AVI file, as long as you have the appropriate compressors and decompressors.  Note, however, that some compressors cannot be used if they have Digital Rights Management (DRM) built into them or if the compressors just are not functioning in the expected manner.]]></description>
    <folder>Samples\C++\DirectShow\Editing\CompressView\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CompressView.exe</exe>
    <screenshot>CompressView.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/CompressViewsample.htm</doc>
    <projectfile6>Compressor.dsw</projectfile6>
    <projectfile7>Compressor.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>compressview</keyword>
      <keyword>compress</keyword>
      <keyword>Editing</keyword>
      <keyword>codec</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>BasicHLSL</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows a simple example of the High-Level Shader Language (HLSL) using the effect interface.]]></description>
    <folder>Samples\C++\Direct3D\BasicHLSL\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>BasicHLSL.exe</exe>
    <screenshot>BasicHLSL.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/basichlsl.htm</doc>
    <projectfile6>BasicHLSL.dsw</projectfile6>
    <projectfile7>BasicHLSL.sln</projectfile7>
    <install>
      <media>Tiny</media>
    </install>
    <language>C++</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 1: CreateDevice</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The CreateDevice tutorial is the first tutorial for using the new Direct3D interfaces for DirectX 9.  It shows how to create a Direct3DDevice9 object.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut01_CreateDevice\</folder>
    <screenshot>Tut01_CreateDevice.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/1/tutorial1.htm</doc>
    <projectfile6>CreateDevice.dsw</projectfile6>
    <projectfile7>CreateDevice.sln</projectfile7>
    <install name="CreateDevice" common="false">
      <reserved>CreateDevice(</reserved>
    </install>
    <language>C++</language>
    <complexity>11</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CustomFormat</name>
    <dxarea>DirectInput</dxarea>
    <type>sample</type>
    <description><![CDATA[The CustomFormat sample illustrates the use of a custom data format.]]></description>
    <folder>Samples\C++\DirectInput\CustomFormat\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>CustomFormat.exe</exe>
    <screenshot>CustomFormat.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/customformatsample.htm</doc>
    <projectfile6>CustomFormat.dsw</projectfile6>
    <projectfile7>CustomFormat.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>CustomFormat</keyword>
      <keyword>data</keyword>
      <keyword>format</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>SetDataFormat</keyword>
      <keyword>DIDATAFORMAT</keyword>
    </keywords>
  </sample>
  <sample>
    <name>CutScene</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Cutscene is a simple fullscreen movie player sample that enables you to add movie playback to your application without needing to learn the specifics of DirectShow programming.]]></description>
    <folder>Samples\C++\DirectShow\Players\CutScene\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>CutScene.exe %DXSDK_SAMPLES%\media\video\ruby.avi</exe>
    <screenshot>CutScene.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/CutScenesample.htm</doc>
    <projectfile6>CutScene.dsw</projectfile6>
    <projectfile7>CutScene.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>CutScene</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>MultiMapper</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The MultiMapper application demonstrates the DirectInput Mapper in a windowed application. The provided class allows multiple users to share action-mapped devices on the same computer.]]></description>
    <folder>Samples\C++\DirectInput\MultiMapper\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>MultiMapper.exe</exe>
    <screenshot>MultiMapper.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/multimappersample.htm</doc>
    <projectfile6>MultiMapper.dsw</projectfile6>
    <projectfile7>MultiMapper.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>MultiMapper</keyword>
      <keyword>ActionMapping</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>DDrawXCL</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how video can be played back from AVI, MPEG files as well as DVD titles in DirectDraw exclusive fullscreen mode.  This is expected to be very helpful to games and interactive content development.]]></description>
    <folder>Samples\C++\DirectShow\Players\DDrawXCL\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DDrawXCL.exe</exe>
    <screenshot>DDrawXCL.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/DDrawXCLsample.htm</doc>
    <projectfile6>DDrawXCL.dsw</projectfile6>
    <projectfile7>DDrawXCL.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>DDrawXCL</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>VMRMix</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application shows capabilities of the new video mixing renderer (VMR) that is the default video renderer in Windows XP.  In particular, it demonstrates how to use the VMR in a mixing mode with several sources, how to apply a bitmap image with a color key over the video, and how to take advantage of the IVMRMixerControl interface to manage source and destination rectangles and alpha-level for each media stream.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRMix\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRMix.exe</exe>
    <screenshot>VMRMix.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRMixsample.htm</doc>
    <projectfile6>VMRMix.dsw</projectfile6>
    <projectfile7>VMRMix.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>VMRMix</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DeviceView</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The DeviceView sample shows how the DIDevImage framework provided with this SDK can be used to create a custom device configuration interface.]]></description>
    <folder>Samples\C++\DirectInput\DeviceView\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>DeviceView.exe</exe>
    <screenshot>DeviceView.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/deviceviewsample.htm</doc>
    <projectfile6>DeviceView.dsw</projectfile6>
    <projectfile7>DeviceView.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>2130</complexity>
    <keywords>
      <keyword>DeviceView</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>ConfigureDevices</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>OptimizedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The OptimizedMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\OptimizedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>OptimizedMesh.exe</exe>
    <screenshot>OptimizedMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/optimizedmesh.htm</doc>
    <projectfile6>OptimizedMesh.dsw</projectfile6>
    <projectfile7>OptimizedMesh.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>ProgressiveMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The ProgressiveMesh sample illustrates how to load and optimize a file-based mesh using the D3DX mesh utility functions.  A progressive mesh is one in which the vertex information is stored internally in a special tree which can be accessed to render the mesh with any given number of vertices.  This procedure is fast, so progressive meshes are ideal for level-of-detail scenarios, where objects in the distance are rendered with fewer polygons.  For more info on D3DX, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\ProgressiveMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ProgressiveMesh.exe</exe>
    <screenshot>ProgressiveMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/ProgressiveMesh.htm</doc>
    <projectfile6>ProgressiveMesh.dsw</projectfile6>
    <projectfile7>ProgressiveMesh.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>ID3DXMesh</keyword>
      <keyword>ID3DXPMesh</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>SkinnedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The SkinnedMesh sample shows how to use D3DX to load and display a skinned mesh.]]></description>
    <folder>Samples\C++\Direct3D\SkinnedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>SkinnedMesh.exe</exe>
    <screenshot>SkinnedMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/SkinnedMesh.htm</doc>
    <projectfile6>SkinnedMesh.dsw</projectfile6>
    <projectfile7>SkinnedMesh.sln</projectfile7>
    <install>
      <reserved>UpdateSkinnedMesh</reserved>
    </install>
    <language>C++</language>
    <complexity>2500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>Text3D</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[The Text3D sample shows how to draw 2D text and 3D text in a 3D scene.  This is most useful for display stats, in game menus, etc.]]></description>
    <folder>Samples\C++\Direct3D\Text3D\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Text3D.exe</exe>
    <screenshot>Text3D.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/Text3D.htm</doc>
    <projectfile6>Text3D.dsw</projectfile6>
    <projectfile7>Text3D.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>FFConst</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The FFConst sample applies raw forces to a force feedback input device, illustrating how a simulator-type application can use force feedback to generate forces computed by a physics engine. You must have a force feedback device connected to your system in order to run the application.]]></description>
    <folder>Samples\C++\DirectInput\FFConst\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>FFConst.exe</exe>
    <screenshot>FFConst.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/ffconstsample.htm</doc>
    <projectfile6>FFConst.dsw</projectfile6>
    <projectfile7>FFConst.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1110</complexity>
    <keywords>
      <keyword>FFConst</keyword>
      <keyword>force</keyword>
      <keyword>feedback</keyword>
      <keyword>effect</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>IDirectInputEffect</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Joystick</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Joystick sample obtains and displays joystick data.]]></description>
    <folder>Samples\C++\DirectInput\Joystick\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Joystick.exe</exe>
    <screenshot>Joystick.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/joysticksample.htm</doc>
    <projectfile6>Joystick.dsw</projectfile6>
    <projectfile7>Joystick.sln</projectfile7>
    <install common="false">
      <reserved>DIJOYSTICK</reserved>
      <reserved>EnumJoysticks</reserved>
      <reserved>g_pJoystick</reserved>
      <reserved>Joystick not found</reserved>
    </install>
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>Joystick</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Keyboard</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Keyboard sample obtains and displays keyboard data.]]></description>
    <folder>Samples\C++\DirectInput\Keyboard\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Keyboard.exe</exe>
    <screenshot>Keyboard.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/keyboardsample.htm</doc>
    <projectfile6>Keyboard.dsw</projectfile6>
    <projectfile7>Keyboard.sln</projectfile7>
    <install common="false">
      <reserved>DIKEYBOARD</reserved>
      <reserved>g_pKeyboard</reserved>
      <reserved>GUID_SysKeyboard</reserved>
      <reserved>Keyboard device</reserved>
    </install>
    <language>C++</language>
    <complexity>120</complexity>
    <keywords>
      <keyword>Keyboard</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mouse</name>
    <dxarea>DirectInput</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Mouse sample obtains and displays mouse data.]]></description>
    <folder>Samples\C++\DirectInput\Mouse\</folder>
    <exefolder>Samples\C++\DirectInput\Bin\</exefolder>
    <exe>Mouse.exe</exe>
    <screenshot>Mouse.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/input/samps/mousesample.htm</doc>
    <projectfile6>Mouse.dsw</projectfile6>
    <projectfile7>Mouse.sln</projectfile7>
    <install common="false">
      <reserved>DIMOUSE</reserved>
      <reserved>g_pMouse</reserved>
      <reserved>GUID_SysMouse</reserved>
    </install>
    <language>C++</language>
    <complexity>130</complexity>
    <keywords>
      <keyword>Mouse</keyword>
      <keyword>IDirectInput8</keyword>
      <keyword>
      </keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowless9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to render video.  It offers features similar to the PlayWnd player sample in the main DirectShow samples directory.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Windowless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Windowless9.exe</exe>
    <screenshot>Windowless9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Windowlesssample.htm</doc>
    <projectfile6>Windowless9.dsw</projectfile6>
    <projectfile7>Windowless9.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>Windowless</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Enumerate DirectSound Devices</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Enumerate DirectSound Devices sample shows how to enumerate and create playback and capture devices.]]></description>
    <folder>Samples\C++\DirectSound\EnumDevices\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>EnumDevices.exe</exe>
    <screenshot>EnumDevices.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/enumeratedirectsounddevicessample.htm</doc>
    <projectfile6>EnumDevices.dsw</projectfile6>
    <projectfile7>EnumDevices.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>FullDuplexFilter</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The Full Duplex Filter sample application shows how to capture and play back sounds at the same time.]]></description>
    <folder>Samples\C++\DirectSound\FullDuplexFilter\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>FullDuplexFilter.exe</exe>
    <screenshot>FullDuplexFilter.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/FullDuplexFiltersample.htm</doc>
    <projectfile6>FullDuplexFilter.dsw</projectfile6>
    <projectfile7>FullDuplexFilter.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>2110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>PlaySound</name>
    <dxarea>DirectSound</dxarea>
    <dxsubarea />
    <type>sample</type>
    <description><![CDATA[The PlaySound sample shows how to play a wave file in a DirectSound secondary buffer.]]></description>
    <folder>Samples\C++\DirectSound\PlaySound\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>PlaySound.exe</exe>
    <screenshot>playsound.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/playsoundsample.htm</doc>
    <projectfile6>PlaySound.dsw</projectfile6>
    <projectfile7>PlaySound.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>110</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
      <keyword />
    </keywords>
  </sample>
  <sample>
    <name>SoundFX</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The SoundFX sample shows how to use DMOs with DirectSound and how to manipulate effect parameters.  It is similar to the DirectMusic AudioFX Sample but does not use an audiopath or any of the DirectMusic interfaces.]]></description>
    <folder>Samples\C++\DirectSound\SoundFX\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>SoundFX.exe</exe>
    <screenshot>SoundFX.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/SoundFXsample.htm</doc>
    <projectfile6>SoundFX.dsw</projectfile6>
    <projectfile7>SoundFX.sln</projectfile7>
    <install>
      <reserved>DirectSoundFx</reserved>
    </install>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StreamData</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Stream Data sample shows how to stream a WAV file to a DirectSound secondary buffer.  It is similar to the Play Sound Sample, but adds support for streaming.]]></description>
    <folder>Samples\C++\DirectSound\StreamData\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>StreamData.exe</exe>
    <screenshot>StreamData.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/StreamDatasample.htm</doc>
    <projectfile6>StreamData.dsw</projectfile6>
    <projectfile7>StreamData.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>2120</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>MultiAnimation</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates mesh animation with multiple animation sets using HLSL skinning and D3DX's animation controller. It shows how an application can render 3D animation by utilizing D3DX's animation support. D3DX has APIs that handles the loading of the animatable mesh, as well as the blending of multiple animations. The animation controller supports animation tracks for this purpose, and allows transitioning from one animation to another smoothly.]]></description>
    <folder>Samples\C++\Direct3D\MultiAnimation\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>MultiAnimation.exe</exe>
    <screenshot>MultiAnimation.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/multianimation.htm</doc>
    <projectfile6>MultiAnimation.dsw</projectfile6>
    <projectfile7>MultiAnimation.sln</projectfile7>
    <install>
      <media>Tiny\\Tiny_skin.bmp</media>
    </install>
    <language>C++</language>
    <complexity>2700</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>ID3DXAnimationController</keyword>
      <keyword>ID3DXAllocateHierarchy</keyword>
      <keyword>ID3DXAnimationCallbackHandler</keyword>
      <keyword>ID3DXAnimationSet</keyword>
      <keyword>ID3DXCompressedAnimationSet</keyword>
      <keyword>ID3DXSkinInfo</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VoiceManagement</name>
    <dxarea>DirectSound</dxarea>
    <type>sample</type>
    <description><![CDATA[The Voice Management sample shows how to implement dynamic voice management when creating DirectSound secondary buffers.]]></description>
    <folder>Samples\C++\DirectSound\VoiceManagement\</folder>
    <exefolder>Samples\C++\DirectSound\Bin\</exefolder>
    <exe>VoiceManagement.exe</exe>
    <screenshot>VoiceManagement.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/htm/VoiceManagementsample.htm</doc>
    <projectfile6>VoiceManagement.dsw</projectfile6>
    <projectfile7>VoiceManagement.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1130</complexity>
    <keywords>
      <keyword>IDirectSound</keyword>
      <keyword>IDirectSoundBuffer</keyword>
      <keyword>WAVEFORMATEX</keyword>
      <keyword>wav</keyword>
      <keyword>wave</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Install</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[DXInstall is an example of how to use DirectXSetup interfaces to install the DirectX subsystem and DirectX drivers.  It shows how to use a callback function to present messages and get user input through a custom interface, in this case a simple modeless dialog box.]]></description>
    <folder>Samples\C++\Misc\DXInstall\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/directxsdk/samples/dinstall.htm</doc>
    <projectfile6>DXInstall.dsw</projectfile6>
    <projectfile7>DXInstall.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1120</complexity>
    <keywords>
      <keyword>DXInstall</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DMOSample</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[DMO Sample is a sample Microsoft DirectX Media Object (DMO).  It takes MPEG-1 video packets as input and produces two output streams.  The first output stream contains video frames in RGB 565 format.  Each frame displays the time code taken from the MPEG-1 video, and is otherwise blank.  The second output stream is an optional text stream with the time code.  DMO Sample uses the IMediaObjectImpl base-class template to implement the IMediaObject interface.  For information about using this template, see "Using the DMO Base Class" in the DirectX SDK documentation.  The Active Template Library (ATL) handles various COM details, including registration, aggregation, IUnknown, and the DLL entry points.]]></description>
    <folder>Samples\C++\DirectShow\DMO\DMOSample\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/DMOSample.htm</doc>
    <projectfile6>DMOSample.dsw</projectfile6>
    <projectfile7>DMOSample.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DMOSample</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>VMRXclBasic</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application is a simple, step by step sample that demonstrates how to play a video in exclusive mode using the VMR and DirectShow.  The application will prompt for a file name to play and then play it until the video is done or until the user exits the application by pressing Esc or Alt+F4.  NOTE: This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\VMRXclBasic\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRXclBasic.exe</exe>
    <screenshot>VMRXclBasic.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRXclBasicsample.htm</doc>
    <projectfile6>VMRXclBasic.dsw</projectfile6>
    <projectfile7>VMRXclBasic.sln</projectfile7>
    <language>C++</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>VMRXclBasic</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DxDiagOutput</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagOutput sample shows how to use the DxDiag COM interface by enumerating every child container and enumerating the properties on each child container.]]></description>
    <folder>Samples\C++\Misc\DxDiagOutput\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>DxDiagOutput.exe</exe>
    <screenshot>DxDiagOutput.jpg</screenshot>
    <projectfile6>DxDiagOutput.dsw</projectfile6>
    <projectfile7>DxDiagOutput.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
    <dxsubarea />
  </sample>
  <sample>
    <name>getdxver</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The purpose of this sample is to demonstrate how applications can detect which version of DirectX installed. This sample uses the DxDiag COM interface to determine which version of DirectX is installed.  For DirectX versions before DirectX 9 where DxDiag COM interface isn't available, the sample will fallback to comparing DirectX file versions.]]></description>
    <folder>Samples\C++\Misc\getdxver\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>getdxver.exe</exe>
    <screenshot>getdxver.jpg</screenshot>
    <projectfile6>getdxver.dsw</projectfile6>
    <projectfile7>getdxver.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>190</complexity>
    <keywords>
      <keyword>getdxver</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Mapper</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the IFilterMapper2::EnumMatchingFilters method to locate filters in the registry. The application's user interface contains controls that match the parameters of the EnumMatchingFilters method, such as minimum merit value, pin categories, and media types.]]></description>
    <folder>Samples\C++\DirectShow\Misc\Mapper\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Mapper.exe</exe>
    <screenshot>Mapper.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Mappersample.htm</doc>
    <projectfile6>Mapper.dsw</projectfile6>
    <projectfile7>Mapper.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>Mapper</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample>
    <name>GargleDMO</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DMO</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is a Microsoft DirectX Media Object (DMO) that creates a gargle effect, similar to the Gargle Filter sample for Microsoft DirectShow. This sample demonstrates how to implement the the following interfaces: IMediaObject, IMediaObjectInPlace, IMediaParamInfo, IMediaParams]]></description>
    <folder>Samples\C++\DirectShow\DMO\GargleDMO\</folder>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/GargleDMOsample.htm</doc>
    <projectfile6>GargleDMO.dsw</projectfile6>
    <projectfile7>GargleDMO.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>GargleDMO</keyword>
      <keyword>DMO</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>Jukebox</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The Video jukebox application scans a directory for media files and displays a list of the relevant file names.  The user can play an individual file or play all of the media files in order.  The jukebox also displays information about the filter graphs that it creates, including the names of the filters, the names of their corresponding pins, and the event codes that are generated.]]></description>
    <folder>Samples\C++\DirectShow\Players\Jukebox\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Jukebox.exe</exe>
    <screenshot>Jukebox.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Jukeboxsample.htm</doc>
    <projectfile6>Jukebox.dsw</projectfile6>
    <projectfile7>Jukebox.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Jukebox</keyword>
      <keyword>Player</keyword>
      <keyword>ASF</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>PlayWndASF</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive audio/video media file player with DRM support.  It uses DirectShow to play Windows Media files (ASF, WMA, WMV) without DRM protection and those which use DRM at a level of 100 or below.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayWndASF\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayWndASF.exe</exe>
    <screenshot>PlayWndASF.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayWndASFsample.htm</doc>
    <projectfile6>PlayWndASF.dsw</projectfile6>
    <projectfile7>PlayWndASF.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>PlayWndASF</keyword>
      <keyword>Player</keyword>
      <keyword>ASF</keyword>
      <keyword>DRM</keyword>
      <keyword>Windows Media</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 4: Lights</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Lights tutorial shows how to use dynamic lighting in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut04_Lights\</folder>
    <screenshot>Tut04_Lights.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/4/tutorial4.htm</doc>
    <projectfile6>Lights.dsw</projectfile6>
    <projectfile7>Lights.sln</projectfile7>
    <install name="Lights" common="false" />
    <language>C++</language>
    <complexity>14</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 3: Matrices</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Matrices tutorial shows how to use 4x4 matrices to transform vertices in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut03_Matrices\</folder>
    <screenshot>Tut03_Matrices.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/3/tutorial3.htm</doc>
    <projectfile6>Matrices.dsw</projectfile6>
    <projectfile7>Matrices.sln</projectfile7>
    <install name="Matrices" common="false" />
    <language>C++</language>
    <complexity>13</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>StillView</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This application scans a directory for image files (BMP, GIF, JPG, TGA) and displays a list of the relevant file names.  Click a file name in the listbox to display its image on the Image Viewer screen, along with image information such as its video dimensions and file size.]]></description>
    <folder>Samples\C++\DirectShow\Players\StillView\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>StillView.exe</exe>
    <screenshot>StillView.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/StillViewsample.htm</doc>
    <projectfile6>StillView.dsw</projectfile6>
    <projectfile7>StillView.sln</projectfile7>
    <language>C++</language>
    <complexity>200</complexity>
    <keywords>
      <keyword>StillView</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 6: Meshes</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Mesh tutorial shows how to load and render file-based geometry meshes in Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut06_Meshes\</folder>
    <screenshot>Tut06_Meshes.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/6/tutorial6.htm</doc>
    <projectfile6>Meshes.dsw</projectfile6>
    <projectfile7>Meshes.sln</projectfile7>
    <install name="Meshes" common="false" />
    <language>C++</language>
    <complexity>16</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>CompiledEffect</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how an ID3DXEffect object can be compiled when the project is built and loaded directly as a binary file at runtime.]]></description>
    <folder>Samples\C++\Direct3D\CompiledEffect\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <screenshot>CompiledEffect.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/compiledeffect.htm</doc>
    <projectfile6>CompiledEffect.dsw</projectfile6>
    <projectfile7>CompiledEffect.sln</projectfile7>
    <install>
      <media>Dwarf</media>
    </install>
    <language>C++</language>
    <complexity>700</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>ID3DXEffect</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MonitorInfo</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is a simple demonstration of information that can be retrieved from the Video Mixing Renderer's IVMRMonitorConfig interface.  The sample enumerates the available monitors in the system and their associated dimensions, flags, handle, name, and optional description.  A text string is created which contains the queried information, which is then displayed in a message box.]]></description>
    <folder>Samples\C++\DirectShow\VMR\MonitorInfo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>MonitorInfo.exe</exe>
    <screenshot>MonitorInfo.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/MonitorInfosample.htm</doc>
    <projectfile6>MonitorInfo.dsw</projectfile6>
    <projectfile7>MonitorInfo.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>MonitorInfo</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayCap is a simple video capture device previewer.  Unlike AMCap, it does not allow you to capture data to a file.  Instead, it searches for the first available video capture device registered in the system, connects to it, and begins displaying its video data in a small window.  It demonstrates a simple example of using the ICaptureGraphBuilder2 and ICreateDevEnum interfaces to build a capture graph.  This type of simple previewing might be used in a videoconferencing application, for example.]]></description>
    <folder>Samples\C++\DirectShow\Capture\PlayCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayCap.exe</exe>
    <screenshot>PlayCap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayCapsample.htm</doc>
    <projectfile6>PlayCap.dsw</projectfile6>
    <projectfile7>PlayCap.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayCap</keyword>
      <keyword>Capture</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayCapMoniker</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Capture</dxsubarea>
    <type>sample</type>
    <description><![CDATA[PlayCapMoniker is a simple video capture device previewer.  Unlike AMCap, it does not allow you to capture data to a file.  Instead, it searches for the first available video capture device registered in the system, connects to it, and begins displaying its video data in a small window.  while the PlayCap sample builds the capture graph manually using the ICaptureGraphBuilder2 interface, this sample simply finds the moniker of the first available capture device, finds its display name, and uses RenderFile() to automatically build the graph.]]></description>
    <folder>Samples\C++\DirectShow\Capture\PlayCapMoniker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayCapMoniker.exe</exe>
    <screenshot>PlayCapMoniker.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayCapMonikersample.htm</doc>
    <projectfile6>PlayCapMoniker.dsw</projectfile6>
    <projectfile7>PlayCapMoniker.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayCapMoniker</keyword>
      <keyword>Capture</keyword>
      <keyword>moniker</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PlayWnd</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive audio/video media file player.  It uses DirectShow to play any supported audio or video media file (MPG, AVI, QT, WAV, AU, SND, MID, etc.).  The video will appear in a window on the screen, and you can use a mouse to move the window.]]></description>
    <folder>Samples\C++\DirectShow\Players\PlayWnd\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>PlayWnd.exe</exe>
    <screenshot>PlayWnd.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/PlayWndsample.htm</doc>
    <projectfile6>PlayWnd.dsw</projectfile6>
    <projectfile7>PlayWnd.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>PlayWnd</keyword>
      <keyword>Player</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Windowless</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windows XP Video Mixing Renderer's Windowless Mode to render video.  It offers features similar to the PlayWnd player sample in the main DirectShow samples directory. You may capture the image currently being displayed in the video window by clicking the right mouse button or by selecting "Capture current frame" on the Image menu.  The image is provided by the Video Mixing Renderer, using the reliable GetCurrentImage() method on the IVMRWindowlessControl interface. This sample requires Windows XP (or greater) functionality and will exit on other systems.]]></description>
    <folder>Samples\C++\DirectShow\VMR\Windowless\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Windowless.exe</exe>
    <screenshot>Windowless.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Windowlesssample.htm</doc>
    <projectfile6>Windowless.dsw</projectfile6>
    <projectfile7>Windowless.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>Windowless</keyword>
      <keyword>VMR</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>SampGrabCB</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ command line application demonstates the use of the IMediaDet interface to create a graph that contains a sample grabber filter.  It shows how to use the sample grabber and a COM object callback to display information about media samples in a running video file.]]></description>
    <folder>Samples\C++\DirectShow\Editing\SampGrabCB\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>SampGrabCB.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/SampGrabCBsample.htm</doc>
    <projectfile6>SampGrabCB.dsw</projectfile6>
    <projectfile7>SampGrabCB.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>sampgrab</keyword>
      <keyword>grab</keyword>
      <keyword>Editing</keyword>
      <keyword>SampleGrabber</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>StillCap</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ app uses the ISampleGrabber interface to capture still images to a .bmp file on disk from a live capture stream.  It demonstrates how to put the sample grabber into the graph, and how to get the bits back from it in real time via the callback.]]></description>
    <folder>Samples\C++\DirectShow\Editing\StillCap\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>StillCap.exe</exe>
    <screenshot>StillCap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/StillCapsample.htm</doc>
    <projectfile6>StillCap.dsw</projectfile6>
    <projectfile7>StillCap.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>StillCap</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>TimelineTest</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample application builds a timeline with a transition.  It demonstrates the following tasks in Microsoft DirectShow Editing Services: 1. Creating a timeline. 2. Adding tracks, sources, transitions, and effects to the timeline. 3. Creating a SMPTE wipe transition. 4. Creating an audio crossfade using the Volume Envelope effect. 5. Setting properties on timeline objects. 6. Modifying a timeline and rendering the filter graph again.]]></description>
    <folder>Samples\C++\DirectShow\Editing\TimelineTest\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>TimelineTest.exe</exe>
    <screenshot>TimelineTest.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/TimelineTestsample.htm</doc>
    <projectfile6>TimelineTest.dsw</projectfile6>
    <projectfile7>TimelineTest.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>TimelineTest</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample>
    <name>SysEnum</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Demonstrates the use of the system device enumerator for enumerating devices and DirectShow filters installed on your system.  By default, the application lists several system device classes by CLSID.  If you select "Show All Filter Categories", it will emulate the behavior of GraphEdit to enumerate all system device classes in the system.  When you select a device class, SysEnum will enumerate all installed filters that relate to the selected class.  When you select a filter, its filename and disk location will be displayed.]]></description>
    <folder>Samples\C++\DirectShow\Misc\SysEnum\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>SysEnum.exe</exe>
    <screenshot>SysEnum.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/SysEnumsample.htm</doc>
    <projectfile6>SysEnum.dsw</projectfile6>
    <projectfile7>SysEnum.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>SysEnum</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample>
    <name>HLSL Workshop</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[This series of guided lessons is derived from the HLSL Workshop presented at the Game Developers Conference 2003. The lessons are divided into four .fx files containing near-complete HLSL code, each of which requires the student to add the missing code needed to implement the target graphics techinque for that lesson. This workshop format is intended to give you an opportunity to experiment with the power and flexibility of HLSL with only a minimal knowledge of HLSL syntax. ]]></description>
    <folder>Samples\C++\Direct3D\tutorials\HLSLWorkshop\</folder>
    <screenshot>HLSLWorkshop.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/hlslworkshop/hlslworkshop.htm</doc>
    <install />
    <language>C++</language>
    <complexity>700</complexity>
    <keywords>
      <keyword>HLSL</keyword>
      <keyword>High-Level Shader Language</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>XTLTest</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Command-line tool for rendering and previewing video editing projects. This tool renders Microsoft DirectShow Editing Services (DES) project files. To enable ASF support in this application, link the project to a Microsoft Windows Media Format (WMF) SDK certificate and define USE_WMF_CERT when you compile the application.  See the WMF SDK documentation for instructions on obtaining a certificate.]]></description>
    <folder>Samples\C++\DirectShow\Editing\XTLTest\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>XTLTest.exe</exe>
    <screenshot>XTLTest.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/XTLTestsample.htm</doc>
    <projectfile6>XTLTest.dsw</projectfile6>
    <projectfile7>XTLTest.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>XTLTest</keyword>
      <keyword>Editing</keyword>
    </keywords>
  </sample>
  <sample>
    <name>RenderLog</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Miscellaneous</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates an application's ability to create a text log of DirectShow's progress while rendering a media file. If you receive an error when calling RenderFile(), you can use the RenderLog tool to create and view the render log.]]></description>
    <folder>Samples\C++\DirectShow\Misc\RenderLog\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>RenderLog.exe</exe>
    <screenshot>RenderLog.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/RenderLogsample.htm</doc>
    <projectfile6>RenderLog.dsw</projectfile6>
    <projectfile7>RenderLog.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>RenderLog</keyword>
      <keyword>Misc</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Tutorial 2: Vertices</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Tutorials</dxsubarea>
    <type>tutorial</type>
    <description><![CDATA[The Vertices tutorial demonstrates the necessary API to render vertices using Direct3D.]]></description>
    <folder>Samples\C++\Direct3D\Tutorials\Tut02_Vertices\</folder>
    <screenshot>Tut02_Vertices.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/tutorials/direct3dtutorials/2/tutorial2.htm</doc>
    <projectfile6>Vertices.dsw</projectfile6>
    <projectfile7>Vertices.sln</projectfile7>
    <install name="Vertices" common="false" />
    <language>C++</language>
    <complexity>12</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample x64="false">
    <name>GrabBitmaps</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Editing</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This C++ command line application shows how to use the sample grabber filter and a COM object callback to capture media samples in a running video file. GrabBitmaps performs the following steps: Open a specified AVI file, Create a filter graph with a sample grabber filter, Read five frames at approximately one-second intervals, Write the frames to bitmap (.BMP) files in the current directory.]]></description>
    <folder>Samples\C++\DirectShow\Editing\GrabBitmaps\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <screenshot>GrabBitmaps.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/grabbitmaps.htm</doc>
    <projectfile6>GrabBitmaps.dsw</projectfile6>
    <projectfile7>GrabBitmaps.sln</projectfile7>
    <language>C++</language>
    <complexity>1000</complexity>
    <keywords>
      <keyword>GrabBitmaps</keyword>
      <keyword>Editing</keyword>
      <keyword>SampleGrabber</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>ShadowVolume</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[The sample demonstrates one common technique for rendering real-time shadows called shadow volumes. The shadows in the sample work by extruding faces of the occluding geometry that are facing away from light to form a volume that represents the shadowed area in 3D space and utilizing the stencil buffer of the 3D device. Stencil buffer is a buffer that can be updated as geometry is rendered, and then used as a mask for rendering additional geometry. Common stencil effects include mirrors, shadows (an advanced technique), and dissolves.]]></description>
    <folder>Samples\C++\Direct3D\ShadowVolume\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ShadowVolume.exe</exe>
    <screenshot>ShadowVolume.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/ShadowVolume.htm</doc>
    <projectfile6>ShadowVolume.dsw</projectfile6>
    <projectfile7>ShadowVolume.sln</projectfile7>
    <install>
      <media>Misc\seafloor.x</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\sphere0.x</media>
      <media>Airplane</media>
      <media>Misc\cell.x</media>
      <media>Misc\cellceiling.jpg</media>
      <media>Misc\cellfloor.jpg</media>
      <media>Misc\cellwall.jpg</media>
      <media>Dwarf</media>
    </install>
    <language>C++</language>
    <complexity>1300</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMRPlayer9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates using the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend one or two running videos and a static image.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\VMRPlayer\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMRPlayer9.exe</exe>
    <screenshot>VMRPlayer.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/VMRPlayersample.htm</doc>
    <projectfile6>VMRPlayer9.dsw</projectfile6>
    <projectfile7>VMRPlayer9.sln</projectfile7>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>VMRPlayer</keyword>
      <keyword>player</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>MeshFromOBJ</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how an ID3DXMesh object can be created from mesh data stored in a Wavefront Object file (.obj). It's convenient to use X-Files (.x) when working with ID3DXMesh objects since D3DX can create and fill an ID3DXMesh object directly from an .x file; however, it's also easy to initialize an ID3DXMesh object with data gathered from any file format or memory resource. ]]></description>
    <folder>Samples\C++\Direct3D\MeshFromOBJ\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>MeshFromOBJ.exe</exe>
    <screenshot>MeshFromOBJ.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/meshfromobj.htm</doc>
    <projectfile6>MeshFromOBJ.dsw</projectfile6>
    <projectfile7>MeshFromOBJ.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>PixelMotionBlur</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to do a motion blur effect using floating point textures and multiple render targets.  The first pass renders the scene to the first render target and writes the velocity of each pixel to the second render target.  Then it renders a full screen quad and uses a pixel shader to look up the velocity of that pixel and blurs the pixel based on the velocity.]]></description>
    <folder>Samples\C++\Direct3D\PixelMotionBlur\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>PixelMotionBlur.exe</exe>
    <screenshot>PixelMotionBlur.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/PixelMotionBlur.htm</doc>
    <projectfile6>PixelMotionBlur.dsw</projectfile6>
    <projectfile7>PixelMotionBlur.sln</projectfile7>
    <install>
      <media>Earth\earth.bmp</media>
      <media>Misc\env2.bmp</media>
      <media>Misc\floor.bmp</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\sphere.x</media>
    </install>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>Blobs</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample mimics a metaball effect in screen space using a pixel shader. True metaball techniques deform meshes according to pushing or pulling modifiers, and are commonly used to model liquid effects like the merging of water droplets; however, metaball effects can be computationally expensive, and this sample shows how to fake a 3D metaball effect in 2D image space using a pixel shader.]]></description>
    <folder>Samples\C++\Direct3D\Blobs\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>Blobs.exe</exe>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/blobs.htm</doc>
    <screenshot>Blobs.jpg</screenshot>
    <projectfile6>Blobs.dsw</projectfile6>
    <projectfile7>Blobs.sln</projectfile7>
    <install>
      <media>Lobby\LobbyCube.dds</media>
    </install>
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Watermark9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Watermark demonstrates the VMR9's ability to alpha blend a static image with the running video stream (or with multiple video streams).  In addition to displaying a watermark (logo) in the bottom right corner of the window, this sample also demonstrates how to flip, mirror, manipulate alpha, and move a bitmap around in the application's video window.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Watermark\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Watermark9.exe</exe>
    <screenshot>Watermark.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Watermarksample.htm</doc>
    <projectfile6>Watermark9.dsw</projectfile6>
    <projectfile7>Watermark9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Watermark</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Ticker9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend video and text.  It uses the VMR9's IVMRMixerBitmap9 interface to blend text onto the bottom portion of the video window in a style similar to closed-captioning text.  When the video file opens, Ticker creates a bitmap with a default text string and begins to scroll it across the bottom of the screen.  You may change the scrolling text with the "Set Text String" dialog.  You may adjust the font and color of the blended text by choosing the "Set Font" menu option.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Ticker\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Ticker9.exe</exe>
    <screenshot>vmr9Ticker.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Tickersample.htm</doc>
    <projectfile6>Ticker9.dsw</projectfile6>
    <projectfile7>Ticker9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Ticker</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>ShadowMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates one popular shadow technique called shadow mapping. A shadow map, in the form of a floating-point texture, is written with depth information of the scene as if the camera is looking out from the light. Then, the shadow map is project onto the scene during rendering. The depth values in the scene are compared with those in the shadow map. If they do not match for a particular pixel, then that pixel is in shadow. This approach allows very efficient real-time shadow casting.]]></description>
    <folder>Samples\C++\Direct3D\ShadowMap\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>ShadowMap.exe</exe>
    <screenshot>ShadowMap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/ShadowMap.htm</doc>
    <projectfile6>ShadowMap.dsw</projectfile6>
    <projectfile7>ShadowMap.sln</projectfile7>
    <install>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\sphere.x</media>
      <media>Airplane</media>
      <media>Misc\car.x</media>
      <media>Misc\env2.bmp</media>
      <media>Misc\floor.bmp</media>
      <media>Misc\ground2.bmp</media>
    </install>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Text9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend video and text.  It uses the VMR9's IVMRMixerBitmap9 interface to blend text onto the bottom portion of the video window in a style similar to closed-captioning text.  The text is written onto a dynamically created bitmap, which is then blended with the running video.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Text\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Text9.exe</exe>
    <screenshot>Text9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Textsample.htm</doc>
    <projectfile6>Text9.dsw</projectfile6>
    <projectfile7>Text9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Text</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Pip9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend multiple video streams in a window.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Pip\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Pip9.exe</exe>
    <screenshot>Pip9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Pipsample.htm</doc>
    <projectfile6>VMRPip9.dsw</projectfile6>
    <projectfile7>VMRPip9.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>Pip</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>MonitorInfo9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This is a simple demonstration of information that can be retrieved from the Video Mixing Renderer 9 IVMRMonitorConfig9 interface.  The sample enumerates the available monitors in the system and their associated dimensions, flags, handle, name, and optional description.  A text string is created which contains the queried information, which is then displayed in a message box.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\MonitorInfo\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>MonitorInfo9.exe</exe>
    <screenshot>MonitorInfo9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/MonitorInfosample.htm</doc>
    <projectfile6>MonitorInfo9.dsw</projectfile6>
    <projectfile7>MonitorInfo9.sln</projectfile7>
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>MonitorInfo</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Blender9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to blend multiple video streams in an MFC dialog-based application.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\Blender\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Blender9.exe</exe>
    <screenshot>Blender9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/Blendersample.htm</doc>
    <projectfile6>Blender9.dsw</projectfile6>
    <projectfile7>Blender9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Blender</keyword>
      <keyword>VMR</keyword>
      <keyword>VMR9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DirectX Diagnostic Report</name>
    <dxarea>Miscellaneous</dxarea>
    <type>sample</type>
    <description><![CDATA[The DxDiagReport sample shows how to use the DxDiag COM interface by the instantiating a known set child container by name and enumerating the properties on each child container by name and stores this information in predefined structures.]]></description>
    <folder>Samples\C++\Misc\DxDiagReport\</folder>
    <exefolder>Samples\C++\Misc\Bin\</exefolder>
    <exe>DxDiagReport.exe</exe>
    <screenshot>DxDiagReport.jpg</screenshot>
    <projectfile6>DxDiagReport.dsw</projectfile6>
    <projectfile7>DxDiagReport.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>100</complexity>
    <keywords>
      <keyword>DxDiagOutput</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>DepthOfField</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows a technique for creating a depth-of-field effect with Direct3D, in which objects are only in focus at a given distance from the camera, and are out of focus at other distances.]]></description>
    <folder>Samples\C++\Direct3D\DepthOfField\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>DepthOfField.exe</exe>
    <screenshot>DepthOfField.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/depthoffield.htm</doc>
    <projectfile6>DepthOfField.dsw</projectfile6>
    <projectfile7>DepthOfField.sln</projectfile7>
    <install>
      <media>Tiger</media>
      <media>Misc\sphere.x</media>
      <media>Earth\earth.bmp</media>
    </install>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>VMR9Allocator</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is designed to show how to render streaming media (MPEG, ASF, AVI and other formats) into a D3D Scene using the Video Mixing Renderer 9 filter.  The sample creates an object that implements IVMRSurfaceAllocator9 and IVMRImagePresenter9.  The object takes over surface and texture allocation and rendering of the decoded frames into a Direct3D9 scene environment.  For simplicity, the VMR9Allocator has just one 3D plane with 2 shaded vertices that is being rotated.
]]></description>
    <folder>Samples\C++\DirectShow\VMR9\VMR9Allocator\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>VMR9Allocator.exe</exe>
    <screenshot>VMR9Allocator.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/vmr9allocatorsample.htm</doc>
    <projectfile6>VMR9Allocator.dsw</projectfile6>
    <projectfile7>VMR9Allocator.sln</projectfile7>
    <language>C++</language>
    <complexity>2200</complexity>
    <keywords>
      <keyword>VMR9Allocator</keyword>
    </keywords>
    <doc />
  </sample>
  <sample>
    <name>BmpMix9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>VMR9</dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample is an interactive video player, which uses the Windowless mode of the DirectX 9 Video Mixing Renderer 9 to render video in a window.  An animated alpha-blended bitmap is rendered onto a Direct3D surface and mixed with the running video.  You can click and drag the bitmap around the video window using your mouse.]]></description>
    <folder>Samples\C++\DirectShow\VMR9\BitmapMix\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>bmpMix9.exe</exe>
    <screenshot>bmpMix9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/bitmapmixsample.htm</doc>
    <projectfile6>bmpMix9.dsw</projectfile6>
    <projectfile7>bmpMix9.sln</projectfile7>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>bmpMix9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>Texture3D9</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>Players</dxsubarea>
    <type>sample</type>
    <description><![CDATA[Draws video on a Microsoft DirectX 9.0 texture surface.  This sample builds on the Direct3D Tutorial05 sample, adding support for rendering video onto a Direct3D9 surface.]]></description>
    <folder>Samples\C++\DirectShow\Players\Texture3D9\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>Texture3D9.exe</exe>
    <screenshot>Texture3D9.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/texture3d9sample.htm</doc>
    <projectfile6>Texture3D9.dsw</projectfile6>
    <projectfile7>Texture3D9.sln</projectfile7>
    <language>C++</language>
    <complexity>2100</complexity>
    <keywords>
      <keyword>Texture3D9</keyword>
      <keyword>Player</keyword>
      <keyword>renderer</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>EffectParam</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows two features in the Direct3D Extension effect framework: parameter blocks and parameter sharing. Parameter blocks group multiple Setxxx() calls and associate them with an effect handle, allowing an application to easily set those parameters contained in the block with a single API call. Parameter sharing lets parameters in multiple effect objects stay synchronized, so that when an application updates a parameter in one effect object, the corresponding parameter in all other effect objects are updated.]]></description>
    <folder>Samples\C++\Direct3D\EffectParam\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EffectParam.exe</exe>
    <screenshot>EffectParam.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/effectparam.htm</doc>
    <projectfile6>EffectParam.dsw</projectfile6>
    <projectfile7>EffectParam.sln</projectfile7>
    <install>
      <media>Lobby\LobbyCube.dds</media>
      <media>Lobby\lobby_skybox.x</media>
    </install>
    <language>C++</language>
    <complexity>1000</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>ID3DXEffect</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>CustomUI</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample showcases the user interface features of the Direct3D sample framework.  The sample framework provides UI controls that applications can readily use.  The supported controls include buttons, radio buttons, check boxes, combo boxes, edit boxes, sliders, and edit boxes with Input Method Editor (IME) functionality.]]></description>
    <folder>Samples\C++\Direct3D\CustomUI\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>CustomUI.exe</exe>
    <screenshot>CustomUI.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/customui.htm</doc>
    <projectfile6>CustomUI.dsw</projectfile6>
    <projectfile7>CustomUI.sln</projectfile7>
    <install>
      <media>misc\cell.x</media>
    </install>
    <language>C++</language>
    <complexity>800</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>HDRCubeMap</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates cubic environment-mapping with floating-point cube textures and high dynamic range lighting. DirectX 9.0's new floating-point textures can store color values higher than 1.0, which can make lighting effects more realistic on the environment-mapped geometry when the material absorbs part of the light. Note that not all cards support all features for the environment-mapping and high dynamic range lighting techniques.]]></description>
    <folder>Samples\C++\Direct3D\HDRCubeMap\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HDRCubeMap.exe</exe>
    <screenshot>HDRCubeMap.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/hdrcubemap.htm</doc>
    <projectfile6>HDRCubeMap.dsw</projectfile6>
    <projectfile7>HDRCubeMap.sln</projectfile7>
    <install>
      <media>Misc\car.x</media>
      <media>Misc\env2.bmp</media>
      <media>Misc\floor.bmp</media>
      <media>Misc\ground2.bmp</media>
      <media>Misc\seafloor.bmp</media>
      <media>Misc\skullocc.x</media>
      <media>Misc\sphere0.x</media>
      <media>Misc\teapot.x</media>
      <media>Airplane</media>
    </install>
    <language>C++</language>
    <complexity>1750</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
      <keyword>IDirect3DCubeTexture9</keyword>
    </keywords>
  </sample>
  <sample updated="true">
    <name>HLSLwithoutEffects</name>
    <dxarea>Direct3D</dxarea>
    <type>sample</type>
    <description><![CDATA[This sample shows some of the effects that can be achieved using vertex shaders written in Microsoft Direct3D's High-Level Shader Language (HLSL). HLSL shaders have C-like syntax and constructs, such as functions, expressions, statements, and data types. A vertex shader looks very similar to a C function, and is executed by the 3D device once per every vertex processed to affect the properties of the vertex.  Note that not all cards may support all the various features vertex shaders.  For more information on vertex shaders, refer to the DirectX SDK documentation.]]></description>
    <folder>Samples\C++\Direct3D\HLSLwithoutEffects\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HLSLwithoutEffects.exe</exe>
    <screenshot>HLSLwithoutEffects.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/hlslwithouteffects.htm</doc>
    <projectfile6>HLSLwithoutEffects.dsw</projectfile6>
    <projectfile7>HLSLwithoutEffects.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>170</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>HDRFormats</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[High dynamic range lighting effects require the ability to work with color values beyond the 0 to 255 range, usually by storing high range color data in textures. Floating point texture formats are the natural choice for HDR applications, but may not be available on all target systems. This sample shows how high dynamic range data can be encoded into integer formats for compatibility across a wide range of devices.]]></description>
    <folder>Samples\C++\Direct3D\HDRFormats\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>HDRFormats.exe</exe>
    <screenshot>HDRFormats.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/hdrformats.htm</doc>
    <projectfile6>HDRFormats.dsw</projectfile6>
    <projectfile7>HDRFormats.sln</projectfile7>
    <install>
      <media>Misc\teapot.x</media>
      <media>Light Probes\uffizi_cross.dds</media>
    </install>
    <language>C++</language>
    <complexity>2100</complexity>
  </sample>
  <sample updated="true">
    <name>EnhancedMesh</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>Meshes</dxsubarea>
    <type>sample</type>
    <description><![CDATA[The EnhancedMesh sample shows how to use D3DX to load and enhance a mesh. The mesh is enhanced by increasing the vertex count.]]></description>
    <folder>Samples\C++\Direct3D\EnhancedMesh\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EnhancedMesh.exe</exe>
    <screenshot>EnhancedMesh.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/enhancedmesh.htm</doc>
    <projectfile6>EnhancedMesh.dsw</projectfile6>
    <projectfile7>EnhancedMesh.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>DVDSample</name>
    <dxarea>DirectShow</dxarea>
    <dxsubarea>DVD</dxsubarea>
    <type>sample</type>
    <description><![CDATA[DVDSample is a C++ DVD application.  It demonstrates all basic playback and navigation functions, as well as advanced features such as parental level management, bookmarks, karaoke, and command synchronization.]]></description>
    <folder>Samples\C++\DirectShow\DVD\DVDSample\</folder>
    <exefolder>Samples\C++\DirectShow\Bin\</exefolder>
    <exe>DVDSample.exe</exe>
    <screenshot>DVDSample.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directshow.chm::/htm/dvdsample.htm</doc>
    <projectfile6>DVDSample.dsw</projectfile6>
    <projectfile7>DVDSample.sln</projectfile7>
    <language>C++</language>
    <complexity>1100</complexity>
    <keywords>
      <keyword>DVDSample</keyword>
      <keyword>DVD</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>PostProcess</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates some interesting image-processing effects that can be achieved interactively. Traditionally, image-processing takes a significant amount of processor power on the host CPU, and is usually done offline. With pixel shaders, these effects can now be performed on the 3D hardware more efficiently, allowing them to be applied in real-time.]]></description>
    <folder>Samples\C++\Direct3D\PostProcess\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>PostProcess.exe</exe>
    <screenshot>PostProcess.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/PostProcess.htm</doc>
    <projectfile6>PostProcess.dsw</projectfile6>
    <projectfile7>PostProcess.sln</projectfile7>
    <install>
      <media>Misc\skullocc.x</media>
      <media>Dwarf</media>
    </install>
    <language>C++</language>
    <complexity>2530</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample>
    <name>PIX Plugin Sample</name>
    <dxarea>Direct3D</dxarea>
    <type>utility</type>
    <description>The PIX Plugin Sample shows how to implement a plugin for the PIX for Windows tool, allowing you to define your own counters.</description>
    <folder>Samples\C++\Misc\PIXPluginSample\</folder>
    <exefolder>Utilities\</exefolder>
    <exe />
    <screenshot>PIXPluginSample.jpg</screenshot>
    <projectfile6>PIXPluginSample.dsw</projectfile6>
    <projectfile7>PIXPluginSample.sln</projectfile7>
    <install common="false" />
    <language>C++</language>
    <complexity>1500</complexity>
    <keywords>
      <keyword>PIX</keyword>
      <keyword>Plugin</keyword>
      <keyword>utilities</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>FragmentLinker</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows how to use the ID3DXFragmentLinker interface. Shader source code can be split into a series of shader fragments, which are compiled separately and linked together to form a complete shader; this linking stage is very efficient, making it suitable for runtime use. In this way a Direct3D application can custom-build an appropriate shader for the current graphics card. 
]]></description>
    <folder>Samples\C++\Direct3D\FragmentLinker\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>FragmentLinker.exe</exe>
    <screenshot>FragmentLinker.gif</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/fragmentlinker.htm</doc>
    <projectfile6>FragmentLinker.dsw</projectfile6>
    <projectfile7>FragmentLinker.sln</projectfile7>
    <install>
      <media>Dwarf</media>
      <reserved>ID3DXFragmentLinker</reserved>
      <reserved>D3DXCreateFragmentLinker</reserved>
    </install>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>PRTPerVertex</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample demonstrates how to use ID3DXPRTEngine, a precomputed radiance transfer (PRT) simulator that uses low-order spherical harmonics (SH).  The sample also demonstrates how to use these results to accomplish dynamic light transport using a dynamic lighting environment with a vs_1_1 vertex shader.]]></description>
    <folder>Samples\C++\Direct3D\PRTPerVertex\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>PRTPerVertex.exe</exe>
    <screenshot>PRTPerVertex.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/PRTPerVertex.htm</doc>
    <projectfile6>PRTPerVertex.dsw</projectfile6>
    <projectfile7>PRTPerVertex.sln</projectfile7>
    <install>
      <media>Tiny</media>
    </install>
    <language>C++</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
  <sample new="true">
    <name>StateManager</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[This sample shows an example implementation of the ID3DXEffectStateManager interface. This inteface can be used to implement custom state-change handling for the D3DX Effects system.]]></description>
    <folder>Samples\C++\Direct3D\StateManager\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>StateManager.exe</exe>
    <screenshot>StateManager.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/statemanager.htm</doc>
    <projectfile6>StateManager.dsw</projectfile6>
    <projectfile7>StateManager.sln</projectfile7>
    <install>
      <reserved>D3DXEffectStateManager</reserved>
      <reserved>SetStateManager</reserved>
    </install>
    <language>C++</language>
    <complexity>1200</complexity>
    <keywords>
    </keywords>
  </sample>
  <sample new="true">
    <name>EmptyProject</name>
    <dxarea>Direct3D</dxarea>
    <dxsubarea>
    </dxsubarea>
    <type>sample</type>
    <description><![CDATA[Starting point for a new Direct3D application]]></description>
    <folder>Samples\C++\Direct3D\EmptyProject\</folder>
    <exefolder>Samples\C++\Direct3D\Bin\</exefolder>
    <exe>EmptyProject.exe</exe>
    <screenshot>EmptyProject.jpg</screenshot>
    <doc>ms-its:../../Documentation/DirectX9/directx9_c.chm::/directx/graphics/tutorialsandsamples/samples/emptyproject.htm</doc>
    <projectfile7>EmptyProject.sln</projectfile7>
    <install />
    <language>C++</language>
    <complexity>50</complexity>
    <keywords>
      <keyword>IDirect3DDevice9</keyword>
      <keyword>IDirect3D9</keyword>
    </keywords>
  </sample>
</samples>